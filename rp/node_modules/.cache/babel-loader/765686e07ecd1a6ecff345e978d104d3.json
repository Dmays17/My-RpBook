{"ast":null,"code":"'use strict';\n\nimport bind from './helpers/bind.js'; // utils is a library of generic helper functions non-specific to axios\n\nconst {\n  toString\n} = Object.prototype;\nconst {\n  getPrototypeOf\n} = Object;\n\nconst kindOf = (cache => thing => {\n  const str = toString.call(thing);\n  return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());\n})(Object.create(null));\n\nconst kindOfTest = type => {\n  type = type.toLowerCase();\n  return thing => kindOf(thing) === type;\n};\n\nconst typeOfTest = type => thing => typeof thing === type;\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n *\n * @returns {boolean} True if value is an Array, otherwise false\n */\n\n\nconst {\n  isArray\n} = Array;\n/**\n * Determine if a value is undefined\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if the value is undefined, otherwise false\n */\n\nconst isUndefined = typeOfTest('undefined');\n/**\n * Determine if a value is a Buffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\n\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);\n}\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\n\n\nconst isArrayBuffer = kindOfTest('ArrayBuffer');\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\n\nfunction isArrayBufferView(val) {\n  let result;\n\n  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = val && val.buffer && isArrayBuffer(val.buffer);\n  }\n\n  return result;\n}\n/**\n * Determine if a value is a String\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a String, otherwise false\n */\n\n\nconst isString = typeOfTest('string');\n/**\n * Determine if a value is a Function\n *\n * @param {*} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\n\nconst isFunction = typeOfTest('function');\n/**\n * Determine if a value is a Number\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Number, otherwise false\n */\n\nconst isNumber = typeOfTest('number');\n/**\n * Determine if a value is an Object\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an Object, otherwise false\n */\n\nconst isObject = thing => thing !== null && typeof thing === 'object';\n/**\n * Determine if a value is a Boolean\n *\n * @param {*} thing The value to test\n * @returns {boolean} True if value is a Boolean, otherwise false\n */\n\n\nconst isBoolean = thing => thing === true || thing === false;\n/**\n * Determine if a value is a plain Object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a plain Object, otherwise false\n */\n\n\nconst isPlainObject = val => {\n  if (kindOf(val) !== 'object') {\n    return false;\n  }\n\n  const prototype = getPrototypeOf(val);\n  return prototype === null || prototype === Object.prototype;\n};\n/**\n * Determine if a value is a Date\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Date, otherwise false\n */\n\n\nconst isDate = kindOfTest('Date');\n/**\n * Determine if a value is a File\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\n\nconst isFile = kindOfTest('File');\n/**\n * Determine if a value is a Blob\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Blob, otherwise false\n */\n\nconst isBlob = kindOfTest('Blob');\n/**\n * Determine if a value is a FileList\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\n\nconst isFileList = kindOfTest('FileList');\n/**\n * Determine if a value is a Stream\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Stream, otherwise false\n */\n\nconst isStream = val => isObject(val) && isFunction(val.pipe);\n/**\n * Determine if a value is a FormData\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an FormData, otherwise false\n */\n\n\nconst isFormData = thing => {\n  const pattern = '[object FormData]';\n  return thing && (typeof FormData === 'function' && thing instanceof FormData || toString.call(thing) === pattern || isFunction(thing.toString) && thing.toString() === pattern);\n};\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\n\n\nconst isURLSearchParams = kindOfTest('URLSearchParams');\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n *\n * @returns {String} The String freed of excess whitespace\n */\n\nconst trim = str => str.trim ? str.trim() : str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n *\n * @param {Boolean} [allOwnKeys = false]\n * @returns {void}\n */\n\n\nfunction forEach(obj, fn) {\n  let {\n    allOwnKeys = false\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  let i;\n  let l; // Force an array if not already something iterable\n\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);\n    const len = keys.length;\n    let key;\n\n    for (i = 0; i < len; i++) {\n      key = keys[i];\n      fn.call(null, obj[key], key, obj);\n    }\n  }\n}\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n *\n * @returns {Object} Result of all merge properties\n */\n\n\nfunction\n  /* obj1, obj2, obj3, ... */\nmerge() {\n  const result = {};\n\n  const assignValue = (val, key) => {\n    if (isPlainObject(result[key]) && isPlainObject(val)) {\n      result[key] = merge(result[key], val);\n    } else if (isPlainObject(val)) {\n      result[key] = merge({}, val);\n    } else if (isArray(val)) {\n      result[key] = val.slice();\n    } else {\n      result[key] = val;\n    }\n  };\n\n  for (let i = 0, l = arguments.length; i < l; i++) {\n    arguments[i] && forEach(arguments[i], assignValue);\n  }\n\n  return result;\n}\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n *\n * @param {Boolean} [allOwnKeys]\n * @returns {Object} The resulting value of object a\n */\n\n\nconst extend = function (a, b, thisArg) {\n  let {\n    allOwnKeys\n  } = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  forEach(b, (val, key) => {\n    if (thisArg && isFunction(val)) {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  }, {\n    allOwnKeys\n  });\n  return a;\n};\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n *\n * @returns {string} content value without BOM\n */\n\n\nconst stripBOM = content => {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n\n  return content;\n};\n/**\n * Inherit the prototype methods from one constructor into another\n * @param {function} constructor\n * @param {function} superConstructor\n * @param {object} [props]\n * @param {object} [descriptors]\n *\n * @returns {void}\n */\n\n\nconst inherits = (constructor, superConstructor, props, descriptors) => {\n  constructor.prototype = Object.create(superConstructor.prototype, descriptors);\n  constructor.prototype.constructor = constructor;\n  Object.defineProperty(constructor, 'super', {\n    value: superConstructor.prototype\n  });\n  props && Object.assign(constructor.prototype, props);\n};\n/**\n * Resolve object with deep prototype chain to a flat object\n * @param {Object} sourceObj source object\n * @param {Object} [destObj]\n * @param {Function|Boolean} [filter]\n * @param {Function} [propFilter]\n *\n * @returns {Object}\n */\n\n\nconst toFlatObject = (sourceObj, destObj, filter, propFilter) => {\n  let props;\n  let i;\n  let prop;\n  const merged = {};\n  destObj = destObj || {}; // eslint-disable-next-line no-eq-null,eqeqeq\n\n  if (sourceObj == null) return destObj;\n\n  do {\n    props = Object.getOwnPropertyNames(sourceObj);\n    i = props.length;\n\n    while (i-- > 0) {\n      prop = props[i];\n\n      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {\n        destObj[prop] = sourceObj[prop];\n        merged[prop] = true;\n      }\n    }\n\n    sourceObj = filter !== false && getPrototypeOf(sourceObj);\n  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);\n\n  return destObj;\n};\n/**\n * Determines whether a string ends with the characters of a specified string\n *\n * @param {String} str\n * @param {String} searchString\n * @param {Number} [position= 0]\n *\n * @returns {boolean}\n */\n\n\nconst endsWith = (str, searchString, position) => {\n  str = String(str);\n\n  if (position === undefined || position > str.length) {\n    position = str.length;\n  }\n\n  position -= searchString.length;\n  const lastIndex = str.indexOf(searchString, position);\n  return lastIndex !== -1 && lastIndex === position;\n};\n/**\n * Returns new array from array like object or null if failed\n *\n * @param {*} [thing]\n *\n * @returns {?Array}\n */\n\n\nconst toArray = thing => {\n  if (!thing) return null;\n  if (isArray(thing)) return thing;\n  let i = thing.length;\n  if (!isNumber(i)) return null;\n  const arr = new Array(i);\n\n  while (i-- > 0) {\n    arr[i] = thing[i];\n  }\n\n  return arr;\n};\n/**\n * Checking if the Uint8Array exists and if it does, it returns a function that checks if the\n * thing passed in is an instance of Uint8Array\n *\n * @param {TypedArray}\n *\n * @returns {Array}\n */\n// eslint-disable-next-line func-names\n\n\nconst isTypedArray = (TypedArray => {\n  // eslint-disable-next-line func-names\n  return thing => {\n    return TypedArray && thing instanceof TypedArray;\n  };\n})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));\n/**\n * For each entry in the object, call the function with the key and value.\n *\n * @param {Object<any, any>} obj - The object to iterate over.\n * @param {Function} fn - The function to call for each entry.\n *\n * @returns {void}\n */\n\n\nconst forEachEntry = (obj, fn) => {\n  const generator = obj && obj[Symbol.iterator];\n  const iterator = generator.call(obj);\n  let result;\n\n  while ((result = iterator.next()) && !result.done) {\n    const pair = result.value;\n    fn.call(obj, pair[0], pair[1]);\n  }\n};\n/**\n * It takes a regular expression and a string, and returns an array of all the matches\n *\n * @param {string} regExp - The regular expression to match against.\n * @param {string} str - The string to search.\n *\n * @returns {Array<boolean>}\n */\n\n\nconst matchAll = (regExp, str) => {\n  let matches;\n  const arr = [];\n\n  while ((matches = regExp.exec(str)) !== null) {\n    arr.push(matches);\n  }\n\n  return arr;\n};\n/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */\n\n\nconst isHTMLForm = kindOfTest('HTMLFormElement');\n\nconst toCamelCase = str => {\n  return str.toLowerCase().replace(/[_-\\s]([a-z\\d])(\\w*)/g, function replacer(m, p1, p2) {\n    return p1.toUpperCase() + p2;\n  });\n};\n/* Creating a function that will check if an object has a property. */\n\n\nconst hasOwnProperty = (_ref => {\n  let {\n    hasOwnProperty\n  } = _ref;\n  return (obj, prop) => hasOwnProperty.call(obj, prop);\n})(Object.prototype);\n/**\n * Determine if a value is a RegExp object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a RegExp object, otherwise false\n */\n\n\nconst isRegExp = kindOfTest('RegExp');\n\nconst reduceDescriptors = (obj, reducer) => {\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  const reducedDescriptors = {};\n  forEach(descriptors, (descriptor, name) => {\n    if (reducer(descriptor, name, obj) !== false) {\n      reducedDescriptors[name] = descriptor;\n    }\n  });\n  Object.defineProperties(obj, reducedDescriptors);\n};\n/**\n * Makes all methods read-only\n * @param {Object} obj\n */\n\n\nconst freezeMethods = obj => {\n  reduceDescriptors(obj, (descriptor, name) => {\n    const value = obj[name];\n    if (!isFunction(value)) return;\n    descriptor.enumerable = false;\n\n    if ('writable' in descriptor) {\n      descriptor.writable = false;\n      return;\n    }\n\n    if (!descriptor.set) {\n      descriptor.set = () => {\n        throw Error('Can not read-only method \\'' + name + '\\'');\n      };\n    }\n  });\n};\n\nconst toObjectSet = (arrayOrString, delimiter) => {\n  const obj = {};\n\n  const define = arr => {\n    arr.forEach(value => {\n      obj[value] = true;\n    });\n  };\n\n  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));\n  return obj;\n};\n\nconst noop = () => {};\n\nconst toFiniteNumber = (value, defaultValue) => {\n  value = +value;\n  return Number.isFinite(value) ? value : defaultValue;\n};\n\nexport default {\n  isArray,\n  isArrayBuffer,\n  isBuffer,\n  isFormData,\n  isArrayBufferView,\n  isString,\n  isNumber,\n  isBoolean,\n  isObject,\n  isPlainObject,\n  isUndefined,\n  isDate,\n  isFile,\n  isBlob,\n  isRegExp,\n  isFunction,\n  isStream,\n  isURLSearchParams,\n  isTypedArray,\n  isFileList,\n  forEach,\n  merge,\n  extend,\n  trim,\n  stripBOM,\n  inherits,\n  toFlatObject,\n  kindOf,\n  kindOfTest,\n  endsWith,\n  toArray,\n  forEachEntry,\n  matchAll,\n  isHTMLForm,\n  hasOwnProperty,\n  hasOwnProp: hasOwnProperty,\n  // an alias to avoid ESLint no-prototype-builtins detection\n  reduceDescriptors,\n  freezeMethods,\n  toObjectSet,\n  toCamelCase,\n  noop,\n  toFiniteNumber\n};","map":{"version":3,"names":["bind","toString","Object","prototype","getPrototypeOf","kindOf","cache","thing","str","call","slice","toLowerCase","create","kindOfTest","type","typeOfTest","isArray","Array","isUndefined","isBuffer","val","constructor","isFunction","isArrayBuffer","isArrayBufferView","result","ArrayBuffer","isView","buffer","isString","isNumber","isObject","isBoolean","isPlainObject","isDate","isFile","isBlob","isFileList","isStream","pipe","isFormData","pattern","FormData","isURLSearchParams","trim","replace","forEach","obj","fn","allOwnKeys","i","l","length","keys","getOwnPropertyNames","len","key","merge","assignValue","arguments","extend","a","b","thisArg","stripBOM","content","charCodeAt","inherits","superConstructor","props","descriptors","defineProperty","value","assign","toFlatObject","sourceObj","destObj","filter","propFilter","prop","merged","endsWith","searchString","position","String","undefined","lastIndex","indexOf","toArray","arr","isTypedArray","TypedArray","Uint8Array","forEachEntry","generator","Symbol","iterator","next","done","pair","matchAll","regExp","matches","exec","push","isHTMLForm","toCamelCase","replacer","m","p1","p2","toUpperCase","hasOwnProperty","isRegExp","reduceDescriptors","reducer","getOwnPropertyDescriptors","reducedDescriptors","descriptor","name","defineProperties","freezeMethods","enumerable","writable","set","Error","toObjectSet","arrayOrString","delimiter","define","split","noop","toFiniteNumber","defaultValue","Number","isFinite","hasOwnProp"],"sources":["C:/Class/Mile2/Trying/node_modules/axios/lib/utils.js"],"sourcesContent":["'use strict';\n\nimport bind from './helpers/bind.js';\n\n// utils is a library of generic helper functions non-specific to axios\n\nconst {toString} = Object.prototype;\nconst {getPrototypeOf} = Object;\n\nconst kindOf = (cache => thing => {\n    const str = toString.call(thing);\n    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());\n})(Object.create(null));\n\nconst kindOfTest = (type) => {\n  type = type.toLowerCase();\n  return (thing) => kindOf(thing) === type\n}\n\nconst typeOfTest = type => thing => typeof thing === type;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n *\n * @returns {boolean} True if value is an Array, otherwise false\n */\nconst {isArray} = Array;\n\n/**\n * Determine if a value is undefined\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nconst isUndefined = typeOfTest('undefined');\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nconst isArrayBuffer = kindOfTest('ArrayBuffer');\n\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  let result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a String, otherwise false\n */\nconst isString = typeOfTest('string');\n\n/**\n * Determine if a value is a Function\n *\n * @param {*} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nconst isFunction = typeOfTest('function');\n\n/**\n * Determine if a value is a Number\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Number, otherwise false\n */\nconst isNumber = typeOfTest('number');\n\n/**\n * Determine if a value is an Object\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an Object, otherwise false\n */\nconst isObject = (thing) => thing !== null && typeof thing === 'object';\n\n/**\n * Determine if a value is a Boolean\n *\n * @param {*} thing The value to test\n * @returns {boolean} True if value is a Boolean, otherwise false\n */\nconst isBoolean = thing => thing === true || thing === false;\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a plain Object, otherwise false\n */\nconst isPlainObject = (val) => {\n  if (kindOf(val) !== 'object') {\n    return false;\n  }\n\n  const prototype = getPrototypeOf(val);\n  return prototype === null || prototype === Object.prototype;\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Date, otherwise false\n */\nconst isDate = kindOfTest('Date');\n\n/**\n * Determine if a value is a File\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFile = kindOfTest('File');\n\n/**\n * Determine if a value is a Blob\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nconst isBlob = kindOfTest('Blob');\n\n/**\n * Determine if a value is a FileList\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFileList = kindOfTest('FileList');\n\n/**\n * Determine if a value is a Stream\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nconst isStream = (val) => isObject(val) && isFunction(val.pipe);\n\n/**\n * Determine if a value is a FormData\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nconst isFormData = (thing) => {\n  const pattern = '[object FormData]';\n  return thing && (\n    (typeof FormData === 'function' && thing instanceof FormData) ||\n    toString.call(thing) === pattern ||\n    (isFunction(thing.toString) && thing.toString() === pattern)\n  );\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nconst isURLSearchParams = kindOfTest('URLSearchParams');\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n *\n * @returns {String} The String freed of excess whitespace\n */\nconst trim = (str) => str.trim ?\n  str.trim() : str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n *\n * @param {Boolean} [allOwnKeys = false]\n * @returns {void}\n */\nfunction forEach(obj, fn, {allOwnKeys = false} = {}) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  let i;\n  let l;\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);\n    const len = keys.length;\n    let key;\n\n    for (i = 0; i < len; i++) {\n      key = keys[i];\n      fn.call(null, obj[key], key, obj);\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n *\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  const result = {};\n  const assignValue = (val, key) => {\n    if (isPlainObject(result[key]) && isPlainObject(val)) {\n      result[key] = merge(result[key], val);\n    } else if (isPlainObject(val)) {\n      result[key] = merge({}, val);\n    } else if (isArray(val)) {\n      result[key] = val.slice();\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (let i = 0, l = arguments.length; i < l; i++) {\n    arguments[i] && forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n *\n * @param {Boolean} [allOwnKeys]\n * @returns {Object} The resulting value of object a\n */\nconst extend = (a, b, thisArg, {allOwnKeys}= {}) => {\n  forEach(b, (val, key) => {\n    if (thisArg && isFunction(val)) {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  }, {allOwnKeys});\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n *\n * @returns {string} content value without BOM\n */\nconst stripBOM = (content) => {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\n/**\n * Inherit the prototype methods from one constructor into another\n * @param {function} constructor\n * @param {function} superConstructor\n * @param {object} [props]\n * @param {object} [descriptors]\n *\n * @returns {void}\n */\nconst inherits = (constructor, superConstructor, props, descriptors) => {\n  constructor.prototype = Object.create(superConstructor.prototype, descriptors);\n  constructor.prototype.constructor = constructor;\n  Object.defineProperty(constructor, 'super', {\n    value: superConstructor.prototype\n  });\n  props && Object.assign(constructor.prototype, props);\n}\n\n/**\n * Resolve object with deep prototype chain to a flat object\n * @param {Object} sourceObj source object\n * @param {Object} [destObj]\n * @param {Function|Boolean} [filter]\n * @param {Function} [propFilter]\n *\n * @returns {Object}\n */\nconst toFlatObject = (sourceObj, destObj, filter, propFilter) => {\n  let props;\n  let i;\n  let prop;\n  const merged = {};\n\n  destObj = destObj || {};\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  if (sourceObj == null) return destObj;\n\n  do {\n    props = Object.getOwnPropertyNames(sourceObj);\n    i = props.length;\n    while (i-- > 0) {\n      prop = props[i];\n      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {\n        destObj[prop] = sourceObj[prop];\n        merged[prop] = true;\n      }\n    }\n    sourceObj = filter !== false && getPrototypeOf(sourceObj);\n  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);\n\n  return destObj;\n}\n\n/**\n * Determines whether a string ends with the characters of a specified string\n *\n * @param {String} str\n * @param {String} searchString\n * @param {Number} [position= 0]\n *\n * @returns {boolean}\n */\nconst endsWith = (str, searchString, position) => {\n  str = String(str);\n  if (position === undefined || position > str.length) {\n    position = str.length;\n  }\n  position -= searchString.length;\n  const lastIndex = str.indexOf(searchString, position);\n  return lastIndex !== -1 && lastIndex === position;\n}\n\n\n/**\n * Returns new array from array like object or null if failed\n *\n * @param {*} [thing]\n *\n * @returns {?Array}\n */\nconst toArray = (thing) => {\n  if (!thing) return null;\n  if (isArray(thing)) return thing;\n  let i = thing.length;\n  if (!isNumber(i)) return null;\n  const arr = new Array(i);\n  while (i-- > 0) {\n    arr[i] = thing[i];\n  }\n  return arr;\n}\n\n/**\n * Checking if the Uint8Array exists and if it does, it returns a function that checks if the\n * thing passed in is an instance of Uint8Array\n *\n * @param {TypedArray}\n *\n * @returns {Array}\n */\n// eslint-disable-next-line func-names\nconst isTypedArray = (TypedArray => {\n  // eslint-disable-next-line func-names\n  return thing => {\n    return TypedArray && thing instanceof TypedArray;\n  };\n})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));\n\n/**\n * For each entry in the object, call the function with the key and value.\n *\n * @param {Object<any, any>} obj - The object to iterate over.\n * @param {Function} fn - The function to call for each entry.\n *\n * @returns {void}\n */\nconst forEachEntry = (obj, fn) => {\n  const generator = obj && obj[Symbol.iterator];\n\n  const iterator = generator.call(obj);\n\n  let result;\n\n  while ((result = iterator.next()) && !result.done) {\n    const pair = result.value;\n    fn.call(obj, pair[0], pair[1]);\n  }\n}\n\n/**\n * It takes a regular expression and a string, and returns an array of all the matches\n *\n * @param {string} regExp - The regular expression to match against.\n * @param {string} str - The string to search.\n *\n * @returns {Array<boolean>}\n */\nconst matchAll = (regExp, str) => {\n  let matches;\n  const arr = [];\n\n  while ((matches = regExp.exec(str)) !== null) {\n    arr.push(matches);\n  }\n\n  return arr;\n}\n\n/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */\nconst isHTMLForm = kindOfTest('HTMLFormElement');\n\nconst toCamelCase = str => {\n  return str.toLowerCase().replace(/[_-\\s]([a-z\\d])(\\w*)/g,\n    function replacer(m, p1, p2) {\n      return p1.toUpperCase() + p2;\n    }\n  );\n};\n\n/* Creating a function that will check if an object has a property. */\nconst hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);\n\n/**\n * Determine if a value is a RegExp object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a RegExp object, otherwise false\n */\nconst isRegExp = kindOfTest('RegExp');\n\nconst reduceDescriptors = (obj, reducer) => {\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  const reducedDescriptors = {};\n\n  forEach(descriptors, (descriptor, name) => {\n    if (reducer(descriptor, name, obj) !== false) {\n      reducedDescriptors[name] = descriptor;\n    }\n  });\n\n  Object.defineProperties(obj, reducedDescriptors);\n}\n\n/**\n * Makes all methods read-only\n * @param {Object} obj\n */\n\nconst freezeMethods = (obj) => {\n  reduceDescriptors(obj, (descriptor, name) => {\n    const value = obj[name];\n\n    if (!isFunction(value)) return;\n\n    descriptor.enumerable = false;\n\n    if ('writable' in descriptor) {\n      descriptor.writable = false;\n      return;\n    }\n\n    if (!descriptor.set) {\n      descriptor.set = () => {\n        throw Error('Can not read-only method \\'' + name + '\\'');\n      };\n    }\n  });\n}\n\nconst toObjectSet = (arrayOrString, delimiter) => {\n  const obj = {};\n\n  const define = (arr) => {\n    arr.forEach(value => {\n      obj[value] = true;\n    });\n  }\n\n  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));\n\n  return obj;\n}\n\nconst noop = () => {}\n\nconst toFiniteNumber = (value, defaultValue) => {\n  value = +value;\n  return Number.isFinite(value) ? value : defaultValue;\n}\n\nexport default {\n  isArray,\n  isArrayBuffer,\n  isBuffer,\n  isFormData,\n  isArrayBufferView,\n  isString,\n  isNumber,\n  isBoolean,\n  isObject,\n  isPlainObject,\n  isUndefined,\n  isDate,\n  isFile,\n  isBlob,\n  isRegExp,\n  isFunction,\n  isStream,\n  isURLSearchParams,\n  isTypedArray,\n  isFileList,\n  forEach,\n  merge,\n  extend,\n  trim,\n  stripBOM,\n  inherits,\n  toFlatObject,\n  kindOf,\n  kindOfTest,\n  endsWith,\n  toArray,\n  forEachEntry,\n  matchAll,\n  isHTMLForm,\n  hasOwnProperty,\n  hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection\n  reduceDescriptors,\n  freezeMethods,\n  toObjectSet,\n  toCamelCase,\n  noop,\n  toFiniteNumber\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}